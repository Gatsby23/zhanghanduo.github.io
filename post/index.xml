<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 张 瀚 铎 Zhang Handuo</title>
    <link>https://zhanghanduo.github.io/post/</link>
    <description>Recent content in Posts on 张 瀚 铎 Zhang Handuo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://zhanghanduo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install new linux environment</title>
      <link>https://zhanghanduo.github.io/post/new_system/</link>
      <pubDate>Mon, 29 Oct 2018 14:46:14 +0800</pubDate>
      
      <guid>https://zhanghanduo.github.io/post/new_system/</guid>
      <description>When you want to install a brand new Ubuntu 16.04 system. You could try to follow this guidance.
 Open Software &amp;amp; Updates and choose the fastest source.
 Update the system:
sudo sh -c &#39;echo &amp;quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&amp;quot; &amp;gt; /etc/apt/sources.list.d/ros-latest.list&#39; sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt-get update sudo apt-get dist-upgrade sudo apt-get install build-essential git  Install Nvidia driver
sudo apt-get install nvidia-396 nvidia-settings  Under cases you have Intel GPU also, please type:</description>
    </item>
    
    <item>
      <title>Price and spec of cloud based GPU</title>
      <link>https://zhanghanduo.github.io/post/gpu_cloud/</link>
      <pubDate>Mon, 29 Oct 2018 14:17:43 +0800</pubDate>
      
      <guid>https://zhanghanduo.github.io/post/gpu_cloud/</guid>
      <description>I summarized several cloud based GPU services:
   Name of services Specification Price (US$)     AWS P2 instance p2.xLarge 0.9 / hour   Azure NC6 1xK80 0.9 / hour   Lambda GPU cloud 8x AWS P2 instances 0.90 / GPU/ hour   NTU HPCC 2 units of 1-P100 is scheduled to be ready by End of October 0.78 / core/ hour    </description>
    </item>
    
    <item>
      <title>You only look once (YOLO) -- (2)</title>
      <link>https://zhanghanduo.github.io/post/yolo2/</link>
      <pubDate>Mon, 20 Aug 2018 16:21:12 +0800</pubDate>
      
      <guid>https://zhanghanduo.github.io/post/yolo2/</guid>
      <description>YOLO has higher localization errors and the recall (measure how good to locate all objects) is lower, compared to SSD. YOLOv2 is the second version of the YOLO with the objective of improving the accuracy significantly while making it faster.
The backbone network architecture of YOLO v2 is as follows: 1. Accuracy Improvements Batch Normalization Also removes the need of dropouts. mAP increases by 2%.
High-resolution Classifier To generate predictions with shape of $7\times 7 \times 125$, we replace the final fully connected layers with a $3\times 3$ convolution layer each outputting 1024 output channels.</description>
    </item>
    
    <item>
      <title>You only look once (YOLO) -- (1)</title>
      <link>https://zhanghanduo.github.io/post/yolo1/</link>
      <pubDate>Mon, 20 Aug 2018 11:39:58 +0800</pubDate>
      
      <guid>https://zhanghanduo.github.io/post/yolo1/</guid>
      <description>You Only Look Once (YOLO) is an object detection system targeted for real-time processing. There are three versions of YOLO: YOLO, YOLOv2 (and YOLO9000) and YOLOv3. For this article, we mainly focus on YOLO first stage.
1. Introduction The target is to find out the bounding box (rectangular boundary frame) of all the objects in the picture and meanwhile judge the categories of them, where left top coordinate denoted by $(x,y)$, as well as the width and height of the rectangle bounding box by $(w,h)$.</description>
    </item>
    
    <item>
      <title>CLion for catkin projects</title>
      <link>https://zhanghanduo.github.io/post/clion/</link>
      <pubDate>Thu, 03 May 2018 10:07:29 +0800</pubDate>
      
      <guid>https://zhanghanduo.github.io/post/clion/</guid>
      <description>Why use CLion?  Better indexing and intelligence hints for C++ than Eclipse and QtCreator-desktop. Free for students. Also integrate PyCharm already. Good Git integration (although I am still used to commandline git). I really like the code inspection clang-tidy function which makes the code style more modern.  Initial set-up Highly recommend you to add source &amp;lt;CATKIN_WORKSPACE_DIR&amp;gt;/devel/setup.bash to the end of ~/.bashrc or ~/.zshrc (Depends you use bash or zsh).</description>
    </item>
    
    <item>
      <title>Pooling Layer in CNN (1)</title>
      <link>https://zhanghanduo.github.io/post/pooling/</link>
      <pubDate>Wed, 02 May 2018 10:16:18 +0800</pubDate>
      
      <guid>https://zhanghanduo.github.io/post/pooling/</guid>
      <description>Today I didn&amp;rsquo;t have the mood to continue my work on map merging of different cameras. So I read the paper from DeepMind of Learned Deformation Stability in Convolutional Neural Networks recommended by Wang Chen.
1. Convolution Operation Convolution operation is typically denoted with an asterisk1: $$ s(t)=(x*w)(t) $$ In Convolutional network terminology, the x is referred to as the input, and the w as the kernel. The output is sometimes referred to as the feature map.</description>
    </item>
    
  </channel>
</rss>